// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?   @unique
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    puntos        Int       @default(0)
    createdAt     DateTime  @default(now())
    level         Level     @relation(fields: [levelNumber], references: [number], onUpdate: Cascade)
    levelNumber   Int       @default(1)
    theme         String    @default("teal")
    accounts      Account[]
    sessions      Session[]

    @@index([levelNumber])
}

model Level {
    number Int @id
    points Int
    users User[]

    @@index([points])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model task {
    id              String   @id @default(cuid())
    name            String
    description     String?
    createdAt       DateTime @default(now())
    usesAI  Boolean @default(false)
    deadline        DateTime?
    routine_id      String?
    routine         routine? @relation(fields: [routine_id], references: [id], onDelete: Cascade)
    routine_order   Int?
    event_id        String?
    event           event?   @relation(fields: [event_id], references: [id])
    estimated_time  Int?
    done            Boolean  @default(false)
    user_id         String

    @@index([event_id])
    @@index([routine_id])
}

model routine {
    id          String   @id @default(cuid())
    name        String
    category    String?
    description String?
    user_id     String
    createdAt   DateTime @default(now())
    days        String
    task        task[]
}

model event {
    id          String   @id @default(cuid())
    name        String
    description String?
    category    String
    date        DateTime
    user_id     String
    createdAt   DateTime @default(now())
    task        task[]
}

model passwordResetToken {
    id        Int      @id @default(autoincrement())
    email     String
    token     String   @unique
    expiresAt DateTime
}

model pushSubscription {
    id        String   @id @default(cuid())
    suscription String @db.Text
    user_id   String
    createdAt DateTime @default(now())
}

model note{
    id String @id @default(cuid())
    note String @db.Text
    user_id String
    createdAt DateTime @default(now())

}

model picture{
    id String @id @default(cuid())
    pictureUrl String @db.Text
}

model greeting{
    id String @id @default(cuid())
    user_id String
    greeting String @db.Text
    createdAt DateTime @default(now())
}

model calorie{
    id String @id @default(cuid())
    user_id String
    calories Int
    createdAt DateTime @default(now())
}