// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?   @unique
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model friend{
    id String @id @default(cuid())
    id_first String
    id_second String
    accepted Boolean
}

model task{
    id        String   @id @default(cuid())
    name    String
    description String?
    category String
    createdAt DateTime @default(now())
    routine_id String
    routine routine? @relation(fields: [routine_id], references: [id])
    event_id String
    event event? @relation(fields: [event_id], references: [id])
    estimated_time Int
    done Boolean
    real_time Int?
    user_id String
    required_energy Int?

    @@index([event_id])
    @@index([routine_id])
}

model routine{
    id        String   @id @default(cuid())
    name    String
    description String?
    user_id String
    createdAt DateTime @default(now())
    task task[]
}

model event{
    id        String   @id @default(cuid())
    name    String
    description String?
    category String
    date DateTime
    user_id String
    createdAt DateTime @default(now())
    task task[]
}

model passwordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
}